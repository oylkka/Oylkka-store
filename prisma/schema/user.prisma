enum UserRole {
  ADMIN
  MANAGER
  CUSTOMER_SERVICE
  USER
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          Image?
  accounts       Account[]
  sessions       Session[]
  role           UserRole        @default(USER)
  authenticators Authenticator[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  // Business relationships
  products      Product[]
  orders        Order[]        @relation("UserOrders")
  reviews       Review[]
  wishlist      WishlistItem[]
  cart          CartItem[]
  addresses     SavedAddress[]
  notifications Notification[]

  // Preferences
  marketingPreferences MarketingPreferences?
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SavedAddress {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isDefault Boolean  @default(false)
  address   Address
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

type MarketingPreferences {
  emailMarketing    Boolean @default(true)
  smsMarketing      Boolean @default(false)
  pushNotifications Boolean @default(true)
}
