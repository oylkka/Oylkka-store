enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  STRIPE
  BANK_TRANSFER
  CASH_ON_DELIVERY
  BKASH
}

model Order {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber   String        @unique
  userId        String        @db.ObjectId
  user          User          @relation("UserOrders", fields: [userId], references: [id])
  status        OrderStatus   @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod PaymentMethod
  items         OrderItem[]

  // Financial details
  subtotal Float
  tax      Float
  shipping Float
  discount Float  @default(0)
  total    Float
  currency String @default("USD")

  // Addresses
  shippingAddress Address
  billingAddress  Address?

  // Shipping details
  trackingNumber String?
  carrier        String?

  // Additional information
  notes       String?
  giftMessage String?
  metadata    Json?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
}

model OrderItem {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String @db.ObjectId
  productSku  String
  productName String
  variantInfo Json?
  quantity    Int
  price       Float
  discount    Float  @default(0)
  order       Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productSku])
}

type Address {
  name   String
  address1   String
  city       String
  district      String
  postalCode String
  phone      String
  email      String
  isDefault  Boolean @default(false)
}

model BkashToken {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  token       String
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}