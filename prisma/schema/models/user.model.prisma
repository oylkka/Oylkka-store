// User-related models

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String?   @unique
  email         String?   @unique
  image         String?
  imageId       String?
  emailVerified DateTime?
  phone         String?
  phoneVerified Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  hasOnboarded  Boolean   @default(false)
  role          UserRole  @default(CUSTOMER)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Business relationships
  products      Product[]
  orders        Order[]        @relation("UserOrders")
  reviews       Review[]
  wishlist      WishlistItem[]
  cart          CartItem[]
  addresses     SavedAddress[]
  shop          Shop? // For vendors
  notifications Notification[]

  // For loyalty program
  points Int @default(0)

  // For customer service
  supportTickets  SupportTicket[] @relation("TicketCreator")
  assignedTickets SupportTicket[] @relation("TicketAssignee")
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model SavedAddress {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isDefault Boolean  @default(false)
  address   Address
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
