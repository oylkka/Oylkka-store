

model Conversation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user1Id   String   @db.ObjectId
  user2Id   String   @db.ObjectId
  user1     User     @relation("User1Conversations", fields: [user1Id], references: [id], onDelete: Cascade)
  user2     User     @relation("User2Conversations", fields: [user2Id], references: [id], onDelete: Cascade)
  messages  Message[]
  lastMessageAt DateTime @default(now())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Ensure a unique 1-to-1 conversation
  @@unique([user1Id, user2Id])
}

model Message {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String   @db.ObjectId
  senderId       String   @db.ObjectId
  content        String
  createdAt      DateTime @default(now())
  readBy         String[] @db.ObjectId // List of user IDs who have read the message

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
}