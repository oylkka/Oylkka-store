model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  userId    String   @db.ObjectId
  rating    Int
  title     String?
  content   String
  images    Image[]
  verified  Boolean  @default(false)
  helpful   Int      @default(0)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([userId])
}

type Image {
  url      String
  publicId String
}

model WishlistItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  quantity  Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  type      String
  title     String
  message   String
  read      Boolean  @default(false)
  data      Json?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([type])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  STRIPE
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

model Order {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber   String        @unique
  userId        String        @db.ObjectId
  user          User          @relation("UserOrders", fields: [userId], references: [id])
  status        OrderStatus   @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod PaymentMethod
  items         OrderItem[]

  // Financial details
  subtotal Float
  tax      Float
  shipping Float
  discount Float  @default(0)
  total    Float
  currency String @default("USD")

  // Addresses
  shippingAddress Address
  billingAddress  Address?

  // Shipping details
  trackingNumber String?
  carrier        String?

  // Additional information
  notes       String?
  giftMessage String?
  metadata    Json?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
}

model OrderItem {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String @db.ObjectId
  productSku  String
  productName String
  variantInfo Json?
  quantity    Int
  price       Float
  tax         Float  @default(0)
  discount    Float  @default(0)
  order       Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productSku])
}

type Address {
  firstName  String
  lastName   String
  company    String?
  address1   String
  address2   String?
  city       String
  state      String
  postalCode String
  country    String
  phone      String?
  email      String?
  isDefault  Boolean @default(false)
}

enum ProductCondition {
  NEW
  USED
  LIKE_NEW
  EXCELLENT
  GOOD
  FAIR
  POOR
  FOR_PARTS
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  OUT_OF_STOCK
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productName String
  description String
  category    String
  subcategory String
  tags        String[]

  sku     String  @unique
  barcode String?

  price           Float
  discountPrice   Float?
  discountPercent Float?
  stock           Int
  lowStockAlert   Int    @default(5)

  condition            ProductCondition
  conditionDescription String?

  weight     Float?
  weightUnit String      @default("kg")
  dimensions Dimensions?

  shippingClass String?
  freeShipping  Boolean @default(false)

  // SEO
  metaTitle       String?
  metaDescription String?
  metaKeywords    String[]

  // Media
  images Image[]
  videos ProductVideo[]

  // Variants and Attributes
  hasVariants    Boolean          @default(false)
  variants       ProductVariant[]
  attributes     Json?
  specifications Json?

  // Status and Visibility
  status      ProductStatus @default(DRAFT)
  isPublished Boolean       @default(false)
  visibility  String        @default("public") // public, private, password-protected

  // Relationships
  createdBy     String         @db.ObjectId
  user          User           @relation(fields: [createdBy], references: [id])
  reviews       Review[]
  wishlistItems WishlistItem[]
  cartItems     CartItem[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category, subcategory])
  @@index([createdBy])
  @@index([status])
  @@fulltext([productName, description, tags])
}

model ProductVideo {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @db.ObjectId
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String
  title       String?
  description String?
  thumbnail   String?
  position    Int      @default(0)
  createdAt   DateTime @default(now())

  @@index([productId])
}

type Dimensions {
  length Float
  width  Float
  height Float
  unit   String
}

model ProductVariant {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  productId  String   @db.ObjectId
  sku        String   @unique
  attributes Json
  price      Float?
  stock      Int
  barcode    String?
  images     Image[]
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([productId])
}

model Category {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String     @unique
  description String?
  image       Image?
  icon        String?
  parentId    String?    @db.ObjectId
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Category[] @relation("CategoryHierarchy")
  isActive    Boolean    @default(true)

  // SEO
  metaTitle       String?
  metaDescription String?
  metaKeywords    String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([parentId])
}

// This is the base configuration file
datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider        = "prisma-client-js"
  output          = "../output"
  previewFeatures = ["prismaSchemaFolder"]
}

enum UserRole {
  ADMIN
  MANAGER
  CUSTOMER_SERVICE
  USER
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          Image?
  accounts       Account[]
  sessions       Session[]
  role           UserRole        @default(USER)
  authenticators Authenticator[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  // Business relationships
  products      Product[]
  orders        Order[]        @relation("UserOrders")
  reviews       Review[]
  wishlist      WishlistItem[]
  cart          CartItem[]
  addresses     SavedAddress[]
  notifications Notification[]

  // Preferences
  marketingPreferences MarketingPreferences?
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SavedAddress {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isDefault Boolean  @default(false)
  address   Address
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

type MarketingPreferences {
  emailMarketing    Boolean @default(true)
  smsMarketing      Boolean @default(false)
  pushNotifications Boolean @default(true)
}
